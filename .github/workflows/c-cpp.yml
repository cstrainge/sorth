name: C/C++ CI

on:
  push:
    branches: [ "main", "ffi" ]
    tags: ["v*"]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        target:
          - arm-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - target: aarch64-apple-darwin
            os: windows-latest
          - target: x86_64-apple-darwin
            os: windows-latest
          - target: arm-unknown-linux-gnu
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: windows-latest
          - target: x86_64-pc-windows-msvc
            os: macos-latest
          - target: arm-unknown-linux-gnu
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    env:
      CXXTARGET: ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v3
      # https://github.com/taiki-e/setup-cross-toolchain-action

      # Install VCPKG on Windows
      - name: Install VCPKG (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.bat
          ./vcpkg/vcpkg install libffi
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg

      # Install libffi for Linux and macOS
      - name: Install libffi (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: |
          if [ $(uname) = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libffi-dev
          elif [ $(uname) = "Darwin" ]; then
            brew install libffi
          fi

      # Install cross-compilation tools
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      # Optionally install libatomic for cross-compilation
      - name: Optionally install libatomic for cross-compilation
        if: ${{ matrix.target == 'arm-unknown-linux-gnu' }}
        run: sudo apt-get install -y libatomic1-arm64-cross

      # targets and version debug
      - name: targets and version debug
        run: clang++ -print-targets && clang++ --version

      # Create build directory
      - name: Create build directory
        run: mkdir -p build

      # Configure CMake (Windows)
      - name: Configure CMake (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ --preset=default -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake .. -G Ninja
        working-directory: build

      # Configure CMake (Linux/macOS)
      - name: Configure CMake (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ .. -G Ninja
        working-directory: build

      # Build with Ninja
      - name: Build with Ninja
        run: ninja
        working-directory: build

      # Locate libffi DLL (Windows)
      - name: Locate and copy libffi DLL (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          set VCPKG_LIBFFI_DIR=$(vcpkg list libffi --x-manifest --triplet=x64-windows | findstr /i libffi)
          for /R "%VCPKG_ROOT%\installed\x64-windows\bin" %%f in (libffi*.dll) do copy "%%f" build
        shell: cmd

      # List files in build directory
      - name: List files in build directory
        run: ls build

      # Upload a Build Artifact
      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'sorth-${{ matrix.target }}'
          directory: 'build'
